services:
  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: gula-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-gula_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gula_password}
      POSTGRES_DB: ${POSTGRES_DB:-gula_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d  # Scripts d'initialisation si nécessaire
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -U ${POSTGRES_USER:-gula_user} -d ${POSTGRES_DB:-gula_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gula-network

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gula-backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-gula_user}:${POSTGRES_PASSWORD:-gula_password}@db:5432/${POSTGRES_DB:-gula_db}
      ENV: ${ENV:-development}
      DEBUG: ${DEBUG:-True}
    volumes:
      - ./backend/app:/app/app  # Hot-reload en développement
    depends_on:
      db:
        condition: service_healthy
    networks:
      - gula-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # Utiliser Dockerfile.dev pour le développement
    container_name: gula-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: development
    volumes:
      - ./frontend/src:/app/src  # Hot-reload en développement
      - ./frontend/public:/app/public
      - /app/node_modules  # Éviter d'écraser node_modules
      - /app/.next  # Éviter d'écraser le cache Next.js
    depends_on:
      - backend
    networks:
      - gula-network

# Volumes persistants
volumes:
  postgres_data:
    driver: local
    name: gula-postgres-data

# Réseau interne
networks:
  gula-network:
    driver: bridge
    name: gula-network

