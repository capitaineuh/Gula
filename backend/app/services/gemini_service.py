"""
Service pour l'extraction de donn√©es de bilans sanguins via Gemini API
"""
import json
from typing import Dict, Any, Optional
from fastapi import HTTPException
from app.config import GEMINI_API_KEY

# V√©rifier que google-generativeai est install√©
print("[GEMINI_SERVICE] V√©rification du module google.generativeai...")
try:
    import google.generativeai as genai
    print(f"[GEMINI_SERVICE] ‚úÖ Module google.generativeai import√© (version: {genai.__version__ if hasattr(genai, '__version__') else 'inconnue'})")
except ImportError as e:
    print(f"[GEMINI_SERVICE] ‚ùå ERREUR: Module google.generativeai non trouv√©!")
    print(f"[GEMINI_SERVICE] Ex√©cutez: pip install google-generativeai")
    raise


class GeminiService:
    """Service pour interagir avec l'API Gemini de Google"""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialiser le service Gemini
        
        Args:
            api_key: Cl√© API Gemini (si None, utilise la configuration)
        """
        print(f"[GEMINI_SERVICE] Initialisation...")
        print(f"[GEMINI_SERVICE] api_key fourni? {bool(api_key)}")
        print(f"[GEMINI_SERVICE] GEMINI_API_KEY depuis config? {bool(GEMINI_API_KEY)}")
        
        self.api_key = api_key or GEMINI_API_KEY
        
        if not self.api_key:
            print("[GEMINI_SERVICE] ‚ùå Aucune cl√© API trouv√©e!")
            raise ValueError(
                "GEMINI_API_KEY non trouv√©e. "
                "Ajoutez GEMINI_API_KEY=votre_cl√© dans backend/.env"
            )
        
        print(f"[GEMINI_SERVICE] ‚úÖ Cl√© API pr√©sente (premiers chars): {self.api_key[:10]}...")
        
        # Configurer Gemini
        try:
            print("[GEMINI_SERVICE] Configuration de Gemini...")
            genai.configure(api_key=self.api_key)
            print("[GEMINI_SERVICE] ‚úÖ Gemini configur√©")
        except Exception as e:
            print(f"[GEMINI_SERVICE] ‚ùå Erreur lors de la configuration: {e}")
            raise
        
        # S√©lection dynamique du mod√®le disponible
        self.model_name = self._select_available_model()
        try:
            print(f"[GEMINI_SERVICE] Cr√©ation du mod√®le: {self.model_name}...")
            self.model = genai.GenerativeModel(self.model_name)
            print("[GEMINI_SERVICE] ‚úÖ Mod√®le cr√©√© avec succ√®s")
        except Exception as e:
            print(f"[GEMINI_SERVICE] ‚ùå Erreur lors de la cr√©ation du mod√®le {self.model_name}: {e}")
            raise
    
    async def extract_biomarkers_from_pdf(self, pdf_bytes: bytes) -> Dict[str, float]:
        """
        Extraire les biomarqueurs et leurs valeurs d'un PDF de bilan sanguin
        
        Args:
            pdf_bytes: Contenu du PDF en bytes
            
        Returns:
            Dictionnaire {nom_biomarqueur: valeur}
            
        Raises:
            HTTPException: En cas d'erreur lors de l'extraction
        """
        print(f"[GEMINI_SERVICE] extract_biomarkers_from_pdf appel√©")
        print(f"[GEMINI_SERVICE] Taille du PDF: {len(pdf_bytes)} bytes")
        
        try:
            # Cr√©er le prompt pour Gemini
            print("[GEMINI_SERVICE] Cr√©ation du prompt...")
            prompt = self._create_extraction_prompt()
            print(f"[GEMINI_SERVICE] Prompt cr√©√© (longueur: {len(prompt)} chars)")
            
            # Pr√©parer le fichier PDF pour Gemini
            print("[GEMINI_SERVICE] Pr√©paration du fichier PDF...")
            pdf_file = {
                "mime_type": "application/pdf",
                "data": pdf_bytes
            }
            print("[GEMINI_SERVICE] ‚úÖ Fichier PDF pr√©par√©")
            
            # Envoyer √† Gemini
            print("[GEMINI_SERVICE] üì§ Envoi √† l'API Gemini...")
            response = self.model.generate_content([prompt, pdf_file])
            print("[GEMINI_SERVICE] ‚úÖ R√©ponse re√ßue de Gemini")
            print(f"[GEMINI_SERVICE] R√©ponse brute: {response.text[:200]}...")
            
            # Parser la r√©ponse
            print("[GEMINI_SERVICE] Parsing de la r√©ponse...")
            biomarkers = self._parse_gemini_response(response.text)
            print(f"[GEMINI_SERVICE] ‚úÖ {len(biomarkers)} biomarqueurs extraits: {list(biomarkers.keys())}")
            
            return biomarkers
            
        except Exception as e:
            print(f"[GEMINI_SERVICE] ‚ùå ERREUR: {type(e).__name__}: {str(e)}")
            import traceback
            print(f"[GEMINI_SERVICE] Traceback complet:")
            traceback.print_exc()
            raise HTTPException(
                status_code=500,
                detail=f"Erreur lors de l'extraction avec Gemini : {str(e)}"
            )

    def _select_available_model(self) -> str:
        """S√©lectionner un mod√®le disponible sur l'API, avec priorit√© aux plus r√©cents.
        Ordre de pr√©f√©rence: gemini-2.5-flash ‚Üí gemini-2.0-flash ‚Üí gemini-1.5-flash-8b ‚Üí gemini-1.5-flash.
        """
        print("[GEMINI_SERVICE] Listing des mod√®les disponibles...")
        preferred = [
            "gemini-2.5-flash",
            "gemini-2.0-flash",
            "gemini-1.5-flash-8b",
            "gemini-1.5-flash",
        ]
        try:
            models = list(genai.list_models())
            names = [m.name.split('/')[-1] if hasattr(m, 'name') else str(m) for m in models]
            print(f"[GEMINI_SERVICE] Mod√®les retourn√©s ({len(names)}): {names}")
            for candidate in preferred:
                if candidate in names:
                    print(f"[GEMINI_SERVICE] ‚úÖ Mod√®le s√©lectionn√©: {candidate}")
                    return candidate
            # Fallback: prendre le premier mod√®le qui supporte generateContent
            for m in models:
                caps = getattr(m, 'supported_generation_methods', []) or []
                if 'generateContent' in caps or 'generate_content' in caps:
                    chosen = m.name.split('/')[-1]
                    print(f"[GEMINI_SERVICE] ‚ö†Ô∏è Fallback sur: {chosen}")
                    return chosen
        except Exception as e:
            print(f"[GEMINI_SERVICE] ‚ö†Ô∏è Impossible de lister les mod√®les: {e}")
        # Dernier recours
        print("[GEMINI_SERVICE] ‚ö†Ô∏è Aucun listing, fallback par d√©faut: gemini-2.0-flash")
        return "gemini-2.0-flash"
    
    def _create_extraction_prompt(self) -> str:
        """
        Cr√©er le prompt optimis√© pour l'extraction de biomarqueurs
        
        Returns:
            Prompt format√© pour Gemini
        """
        return """
Tu es un assistant m√©dical sp√©cialis√© dans l'analyse de bilans sanguins.

**T√ÇCHE :** Extrais UNIQUEMENT les biomarqueurs et leurs valeurs num√©riques de ce bilan sanguin PDF.

**FORMAT DE SORTIE :**
Retourne un JSON valide avec cette structure EXACTE (pas de texte avant ou apr√®s) :
{
  "hemoglobine": 13.2,
  "cholesterol_total": 2.3,
  "vitamine_d": 18,
  "glucose": 0.95
}

**R√àGLES IMPORTANTES :**
1. Utilise les noms de biomarqueurs en minuscules, avec underscores pour les espaces
2. Extrais UNIQUEMENT les valeurs num√©riques (pas les unit√©s)
3. Si plusieurs valeurs pour un biomarqueur, prends la plus r√©cente
4. Ignore les valeurs de r√©f√©rence (min/max)
5. Convertis les virgules en points pour les d√©cimales
6. Ne retourne QUE le JSON, aucun texte explicatif

**NOMS STANDARDS √Ä UTILISER :**
- H√©moglobine ‚Üí hemoglobine
- Cholest√©rol total ‚Üí cholesterol_total
- Cholest√©rol HDL ‚Üí cholesterol_hdl
- Cholest√©rol LDL ‚Üí cholesterol_ldl
- Triglyc√©rides ‚Üí triglycerides
- Glucose ‚Üí glucose
- Vitamine D ‚Üí vitamine_d
- Fer s√©rique ‚Üí fer_serique
- Ferritine ‚Üí ferritine
- TSH ‚Üí tsh
- Cr√©atinine ‚Üí creatinine
- Ur√©e ‚Üí uree
- ASAT/SGOT ‚Üí asat
- ALAT/SGPT ‚Üí alat
- Gamma GT ‚Üí gamma_gt
- Leucocytes ‚Üí leucocytes
- Plaquettes ‚Üí plaquettes

Retourne maintenant le JSON des biomarqueurs extraits :
"""
    
    def _parse_gemini_response(self, response_text: str) -> Dict[str, float]:
        """
        Parser la r√©ponse de Gemini pour extraire le JSON
        
        Args:
            response_text: R√©ponse brute de Gemini
            
        Returns:
            Dictionnaire des biomarqueurs
            
        Raises:
            ValueError: Si le JSON est invalide
        """
        try:
            # Nettoyer la r√©ponse (enlever les markdown code blocks si pr√©sents)
            cleaned_text = response_text.strip()
            
            # Enlever les ```json et ``` si pr√©sents
            if cleaned_text.startswith("```json"):
                cleaned_text = cleaned_text[7:]
            elif cleaned_text.startswith("```"):
                cleaned_text = cleaned_text[3:]
            
            if cleaned_text.endswith("```"):
                cleaned_text = cleaned_text[:-3]
            
            cleaned_text = cleaned_text.strip()
            
            # Parser le JSON
            biomarkers = json.loads(cleaned_text)
            
            # Valider que c'est un dictionnaire
            if not isinstance(biomarkers, dict):
                raise ValueError("La r√©ponse n'est pas un objet JSON valide")
            
            # Convertir toutes les valeurs en float
            parsed_biomarkers = {}
            for key, value in biomarkers.items():
                try:
                    # Normaliser le nom (minuscules, underscores)
                    normalized_key = key.lower().strip().replace(" ", "_")
                    
                    # Convertir la valeur en float
                    parsed_biomarkers[normalized_key] = float(value)
                except (ValueError, TypeError):
                    # Ignorer les valeurs non num√©riques
                    continue
            
            if not parsed_biomarkers:
                raise ValueError("Aucun biomarqueur valide trouv√© dans la r√©ponse")
            
            return parsed_biomarkers
            
        except json.JSONDecodeError as e:
            raise ValueError(f"Impossible de parser le JSON de Gemini : {str(e)}")
    
    async def validate_pdf(self, pdf_bytes: bytes, max_size_mb: int = 10) -> bool:
        """
        Valider qu'un PDF est acceptable pour traitement
        
        Args:
            pdf_bytes: Contenu du PDF
            max_size_mb: Taille maximale en MB
            
        Returns:
            True si valide
            
        Raises:
            HTTPException: Si le PDF n'est pas valide
        """
        # V√©rifier la taille
        size_mb = len(pdf_bytes) / (1024 * 1024)
        if size_mb > max_size_mb:
            raise HTTPException(
                status_code=400,
                detail=f"PDF trop volumineux ({size_mb:.1f} MB). Maximum : {max_size_mb} MB"
            )
        
        # V√©rifier que ce n'est pas vide
        if len(pdf_bytes) == 0:
            raise HTTPException(
                status_code=400,
                detail="Le fichier PDF est vide"
            )
        
        return True


# Instance singleton du service
_gemini_service: Optional[GeminiService] = None


def get_gemini_service() -> GeminiService:
    """
    Obtenir l'instance singleton du service Gemini
    
    Returns:
        Instance du GeminiService
    """
    global _gemini_service
    
    print("[GET_GEMINI_SERVICE] Appel de get_gemini_service()")
    print(f"[GET_GEMINI_SERVICE] Service d√©j√† initialis√©? {_gemini_service is not None}")
    
    if _gemini_service is None:
        print("[GET_GEMINI_SERVICE] Cr√©ation d'une nouvelle instance...")
        try:
            _gemini_service = GeminiService()
            print("[GET_GEMINI_SERVICE] ‚úÖ Instance cr√©√©e avec succ√®s")
        except Exception as e:
            print(f"[GET_GEMINI_SERVICE] ‚ùå Erreur lors de la cr√©ation: {e}")
            import traceback
            traceback.print_exc()
            raise
    else:
        print("[GET_GEMINI_SERVICE] R√©utilisation de l'instance existante")
    
    return _gemini_service

