version: '3.8'

# Configuration pour la production
services:
  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: gula-db-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gula-network-prod

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gula-backend-prod
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      ENV: production
      DEBUG: False
    depends_on:
      db:
        condition: service_healthy
    networks:
      - gula-network-prod
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile  # Utiliser le Dockerfile de production
    container_name: gula-frontend-prod
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - gula-network-prod

  # Nginx reverse proxy (optionnel pour la production)
  nginx:
    image: nginx:alpine
    container_name: gula-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # Certificats SSL si nécessaire
    depends_on:
      - frontend
      - backend
    networks:
      - gula-network-prod

volumes:
  postgres_data_prod:
    driver: local
    name: gula-postgres-data-prod

networks:
  gula-network-prod:
    driver: bridge
    name: gula-network-prod

